CREATE TABLE Employee1 (
employee_id INT PRIMARY KEY,
employee_name VARCHAR(50),
department VARCHAR(50),
manager_id INT, -- Refers to the employee_id of the manager
skill_level INT, -- 1 to 5, where 5 is the highest skill level
training_hours INT -- Total training hours attended
);
INSERT INTO Employee1 (employee_id, employee_name, department,
manager_id, skill_level, training_hours)
VALUES
(1, 'Amit', 'Data Analytics', NULL, 5, 100),
(2, 'Pooja', 'Data Analytics', 1, 4, 80),
(3, 'Ravi', 'Data Analytics', 1, 3, 60),
(4, 'Neha', 'Data Engineering', 2, 4, 70),
(5, 'Vikram', 'Data Engineering', 2, 2, 50),
(6, 'Raj', 'Data Engineering', 4, 3, 40),
(7, 'Priya', 'Data Science', NULL, 5, 110),
(8, 'Sonal', 'Data Science', 7, 4, 90),
(9, 'Kabir', 'Data Science', 7, 3, 60),
(10, 'Meena', 'Data Science', 8, 2, 40),
(11, 'Nikhil', 'Data Analytics', 2, 3, 50),
(12, 'Isha', 'Data Analytics', 1, 4, 90),
(13, 'Arjun', 'Data Engineering', 4, 3, 70),
(14, 'Deepa', 'Data Engineering', 5, 2, 60),
(15, 'Om', 'Data Science', 8, 3, 70),
(16, 'Reena', 'Data Engineering', 4, 3, 65),
(17, 'Ananya', 'Data Science', 7, 4, 95),
(18, 'Suresh', 'Data Analytics', NULL, 5, 100),
(19, 'Geeta', 'Data Analytics', 1, 3, 55),
(20, 'Tarun', 'Data Science', 7, 4, 85),
(21, 'Manju', 'Data Engineering', 5, 2, 60);

Select * from Employee1;
--Q1. Write a query to list all employees along with their managers'
--names. Include employees who do not have a manager assigned
--(they should still appear in the results with a NULL value for the manager).
Select e1.employee_name as employee_name, e2.employee_name as manager_name from employee1 e1 left join employee1 e2
on e1.manager_id = e2.employee_id;

--Q2. Identify all employees whose manager belongs to the same
--department as them. Return the employee name, manager name,and their department.
Select  e1.employee_name as employee_name, e2.employee_name as manager_name, e1.department,e2.department from employee1 e1
join employee1 e2 on e1.manager_id = e2.employee_id and e1.department=e2.department;
--(OR)
Select * from 
(Select  e1.employee_name as employee_name, e2.employee_name as manager_name, e1.department as employee_department,e2.department as manager_department from employee1 e1
left join employee1 e2 on e1.manager_id = e2.employee_id) where employee_department=manager_department;

--Q3. Find all employees who do not have a manager assigned. These
--employees are typically department heads or senior personnel. Return their names, departments, and skill levels
Select * from employee1 where manager_id is null;

--Q4. Identify all employees whose manager has a higher skill level than
--them. Return the employee name, manager name, and their respective skill levels.
Select e1.employee_name as employee_name,e2.employee_name as manager_name,e1.skill_level as employee_skill,
e2.skill_level as manager_skill from employee1 e1
join employee1 e2 on e1.manager_id = e2.employee_id and e1.skill_level<e2.skill_level;

--Q5. Find all pairs of employees who share the same manager. Exclude
--pairs where an employee is matched with themselves. Include both employee names and their shared manager's name
Select e1.employee_name as employee1, e2.employee_name as employee2,e3.employee_name as manager_name
from employee1 e1 join employee1 e2 on e1.manager_id = e2.manager_id  and 
e1.employee_name!=e2.employee_name and e1.employee_name<e2.employee_name 
join employee1 e3 on e3.employee_id = e1.manager_id;

--Q6. List all employees whose managers belong to a different
--department. Return the employee name, manager name, the employee's department, and the manager's department
Select e1.employee_name as employee_name, e2.employee_name as manager_name, e1.department as employee_department,
e2.department as manager_department from employee1 e1 join employee1 e2 on e1.manager_id = e2.employee_id 
where e1.department!=e2.department;

--Q7. Create a chain of reporting by listing employees and their managers,
--followed by the manager’s manager (if applicable). Return the employee name, their manager's name,
--and the manager's manager's name.
Select e1.employee_id,e1.employee_name as employee_name, e2.employee_name as manager_name,
e3.employee_name as manager_managers_name
from employee1 e1  join employee1 e2 on e1.manager_id = e2.employee_id 
left join employee e3 on e2.manager_id = e3.employee_id;

--UPDATING Tables
CREATE TABLE Products1 (
product_id INT PRIMARY KEY,
product_name VARCHAR(50),
category VARCHAR(50),
price DECIMAL(10, 2),
stock INT,
last_updated DATE
);
INSERT INTO Products1 (product_id, product_name, category, price, stock, last_updated)
VALUES
(1, 'Laptop', 'Electronics', 50000.00, 10, '2023-12-01'),
(2, 'Smartphone', 'Electronics', 20000.00, 25, '2023-12-01'),
(3, 'Chair', 'Furniture', 3000.00, 50, '2023-12-01'),
(4, 'Desk', 'Furniture', 7000.00, 20, '2023-12-01'),
(5, 'Air Conditioner', 'Appliances', 35000.00, 5, '2023-12-01'),
(6, 'Refrigerator', 'Appliances', 40000.00, 8, '2023-12-01');

Select * from Products1
--Q1. The price of the "Laptop" needs to be increased by 10% due to rising costs.
--Write an SQL query to update the price of this product.
update Products1 set price = price + (price*10)/100 where product_name='Laptop';

--Q2. The "Furniture" category has been restocked, and 10 additional units need to be 
--added to all products in this category.Write a query to update the stock
update Products1 set stock=stock+10 where category='Furniture';

--Q3. Update the last_updated column for all products to reflect 
--today’s date. Write a query to achieve this.
update Products1 set last_updated=current_date;

--Q4. The product "Smartphone" should be moved to the "Mobiles" category, and 
--its price reduced to 18,000. Write an SQL query to update both columns.
update Products1 set category='Mobiles', price=18000 where product_name='Smartphone'

--Q5.Products with stock less than 10 are in high demand. Increase their prices by
--5% to reflect this. Write a query to update these products
update Products1 set price=price*1.05 where stock<10;

--Q6.The prices of "Desk" and "Chair" should be reduced by 15% as part
--of a clearance sale. Write a query to apply this change
Update Products1 set price=price*0.85 where product_name in ('Desk','Chair')

--Q7. Some products have NULL values in the stock column. Set the stock 
--to 0 for all such products. Write a query to fix this.
update Products1 set stock=0 where stock is NULL

--Q8. Products that haven’t been updated in the last 30 days should 
--have their stock set to 0. Write a query to handle this.
update Products1 set stock=0 where last_updated<current_date - interval '30 days'

--Q9. Apply a 20% discount to all products in the "Electronics" category as
--part of a promotional sale. Write a query to update the prices.
update Products1 set price=price * 0.8 where category='Electronics';
